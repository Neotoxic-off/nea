#!/usr/bin/env python3

import os
import json
import shutil
import argparse
import subprocess

class settings:
    SRC     = ".nearc.json"
    TYPE    = None
    MESSAGE = None
    BREAK   = None
    EMOJI   = None

def color(c, f):
    data = {
        "reset"  : "0",
        "red"    : "31",
        "green"  : "32",
        "yellow" : "33",
        "blue"   : "34",
        "purple" : "35",
        "cyan"   : "36",
        "white"  : "37"
    }
    if data.get("%s" % c) != None and (f >= 0 and f <= 5):
        return ("\033[%s;%sm" % (f, data.get("%s" % c)))
    return (None)

def errors(error, type = None):
    data = {
        "0" : "'%s' file not found" % settings.SRC,
        "1" : "Something wrong with setup",
        "2" : "Something wrong with reset",
        "3" : "Make sure your config file is correct",
        "4" : "'default_message' not found",
        "5" : "'default_type' not found",
        "6" : "'break' not found",
        "7" : "'type' not found",
        "8" : "Commit type: '%s' not found" % type,
    }
    return (data["%s" % error])

def check_plugins(configuration):
    try:
        if "default_message" not in configuration["config"]["commit"]:
            raise Exception(errors("4"))
        if "default_type" not in configuration["config"]["commit"]:
            raise Exception(errors("5"))
        if "break" not in configuration["config"]:
            raise Exception(errors("6"))
        if "type" not in configuration["config"]:
            raise Exception(errors("7"))
    except Exception as error:
        print("Error: %s" % repr(error.args[0]))
        exit(-1)

def load_plugins(configuration):
    if settings.MESSAGE == None:
        settings.MESSAGE = configuration["config"]["commit"]["default_message"]
    if settings.TYPE == None:
        settings.TYPE = configuration["config"]["commit"]["default_type"]
    if settings.BREAK == None:
        settings.BREAK = configuration["config"]["break"]
    try:
        settings.EMOJI = configuration["config"]["type"]["%s" % settings.TYPE]
        if settings.TYPE not in configuration["config"]["type"]:
            raise Exception(errors("8", settings.TYPE))
    except Exception as error:
        print("Error: %s" % repr(error.args[0]))
        exit(-1)

def plugin():
    if os.path.exists("%s/%s" % (os.environ["HOME"], settings.SRC)):
        f = open("%s/%s" % (os.environ["HOME"], settings.SRC), 'r')
        configuration = json.load(f)
        check_plugins(configuration)
        load_plugins(configuration)
        f.close()
        return (0)
    else:
        print(errors("0"))
        return (-1)

def arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument("-s", "--setup",   action = "store_true",  help = "Setup the configuration", default = False)
    parser.add_argument("-r", "--reset",   action = "store_true",  help = "Reset the configuration", default = False)
    parser.add_argument("-m", "--message", action = "store",       help = "Message for your commit", default = None)
    parser.add_argument("-t", "--type",    action = "store",       help = "Commit type",             default = None)
    args = parser.parse_args()
    settings.MESSAGE = args.message
    settings.TYPE = args.type

    if args.reset:
        reset()
    if args.setup:
        setup()

def display(commit, sucess = False):
    if sucess == True:
        commit.insert(0, ("%sâœ“%s " % (color("green", 1), color("reset", 0))))
    else:
        commit.insert(0, ("%sâœ—%s " % (color("red", 1), color("reset", 0))))
    for i in range(0, len(commit)):
        if i == (len(commit) - 1):
            print("%s " % commit[i])
        else:
            print("%s " % commit[i], end = '')

def setup():
    if os.path.exists("%s/%s" % (os.environ["HOME"], settings.SRC)) == False:
        print("Starting setup...")
        try:
            shutil.copyfile(settings.SRC, "%s/%s" % (os.environ["HOME"], settings.SRC))
            print("Setup done")
            exit(0)
        except(IOError):
            print(errors("1"))
            exit(-1)
    else:
        print("Setup already done")
        exit(-1)

def reset():
    if os.path.exists("%s/%s" % (os.environ["HOME"], settings.SRC)) == True:
        print("Starting reset...")
        try:
            os.remove("%s/%s" % (os.environ["HOME"], settings.SRC))
            shutil.copyfile(settings.SRC, "%s/%s" % (os.environ["HOME"], settings.SRC))
            print("Reset done")
            exit(0)
        except(IOError):
            print(errors("1"))
            exit(-1)
    else:
        print("Setup not present")
        exit(-1)

def commiter():
    commit = ["git", "commit", "-m", "%s %s %s %s" % (settings.EMOJI, settings.TYPE, settings.BREAK, settings.MESSAGE)]

    try:
        subprocess.run(commit)
        display(commit, True)
    except:
        display(commit, False)

def main():
    arguments()
    if plugin() == 0:
        commiter()

main()
